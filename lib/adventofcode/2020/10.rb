# frozen_string_literal: true

module Adventofcode
  module Year2020
    class Day10 < Adventofcode::Day
      # what is the distribution of joltage differences between the charging
      # outlet, the adapters, and your device?
      # What is the number of 1-jolt differences multiplied by the number of
      # 3-jolt differences?
      def part_one
        j = Hash.new(0)
        adapters = ([0] + input + [input.max + 3]).sort
        adapters.each_with_index do |i, idx|
          diff = i - adapters[idx - 1]
          j[diff] += 1
        end

        j[1] * j[3]
      end

      def dp(adapters, cache, n)
        return 1 if n == 0
        return 0 if !adapters.include?(n)
        cache[n] ||= (1..3).sum { |x| dp(adapters, cache, n - x) }
      end

      # d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 22)
      #   d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 22 - 1)
      #     d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 20)
      #       d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 19)
      #         d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 18)
      #           d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 17)
      #             d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 16)
      #               d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 15)
      #               + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 14)
      #               + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 13)
      #             + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 15)
      #             + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 14)
      #           + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 16)
      #           + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 15)
      #         + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 17)
      #         + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 16)
      #       + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 18)
      #       + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 17)
      #     + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 19)
      #     + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 18)
      #   + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 22 - 2)
      #     d([0,1,4,5,7,10,11,12,15,17,19,22], {}, (22 - 2) - 1)
      #       d([0,1,4,5,7,10,11,12,15,17,19,22], {}, ((22 - 2) - 1) - 1)
      #         d([0,1,4,5,7,10,11,12,15,17,19,22], {}, (((22 - 2) - 1) - 1) - 1)
      #         + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, (((22 - 2) - 1) - 1) -2)
      #         + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, (((22 - 2) - 1) - 1) -3)
      #       + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, ((22 - 2) - 2) - 2)
      #       + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, ((22 - 2) - 3) - 3)
      #     + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, (22 - 2) - 2)
      #     + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, (22 - 2) - 3)
      #   + d([0,1,4,5,7,10,11,12,15,17,19,22], {}, 11 - 3)

      def part_two
        adapters = ([0] + input + [input.max + 3]).sort
        dp(adapters, {}, adapters.last)
      end
    end
  end
end

